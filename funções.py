# -*- coding: utf-8 -*-
"""Funções.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G3uKZWxkPlj5T5xggkCfZkVQdtKdceCN

## Funções em Python

São usadas para economizar tempo e esforço.

Cuidam da rotina do código.

quando um bloco de código precisa ser repetido muitas vezes, melhor criar uma Função qie fazer isso

Outro uso da função é esconder os detalhes da execução do código.

## Sintaxe para a criação da função
"""



def dizer_ola():      # cria uma função
  print("olá mundo!") # escopo da função, oque ele vai ser...


def ini():
  print('inicio do programa...')


ini()  # exibe a função
dizer_ola()  # invoca a função



(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

"""#criando uma função simples"""

nome = input("Digite o seu nome: ") # input pra puxar a variavel nome


def dizer_oi(nome): # função para o texto
  print(f'Oi! {nome}')
  print('ja pode aomossar?')

dizer_oi(nome) # chama afunção

# nessa partené a definição da função

def mensagem(msg):
  print(f'{msg}')

mensagem('Inicio do programa.../n') # text é passado como parâmetro

mensagem('Fim do programa.../n')

"""## Função para ajudar a exibição"""

def pulalinha():
  print()

  mensagem('Teste linha 4')
  pulalinha()
  mensagem("teste linha 6")

def mensagem(msg):
  print(f'{msg}')

  mensagem('Inicio do programa.../n') # text é passado como parâmetro

  mensagem('Fim do programa.../n')

msg = input("Digite: ")
mensagem(msg)

"""## função de exemplo - somar dois numeros"""

# declaração da função

def soma(a,b):  # assinatura da funçã com parametros a e b
  return print(f'A soma de {a} e {b} é  {a + b}')  # retorno

soma (2, 4)        # os parametros e a b são posicionais, a é o 1o b é o 2o
soma (b = 2, a = 4)

"""##Exercicio - 1"""

# definição da função somar

def somar(L):    # declarar a função
  total = 0      # declarar uma variavel que armazena o total da soma
  for e in L:    # percorrer os elementos da lista
    total += e   # adicionar cada elemento ao total
  return total   # no fim da lista, obtemos a soma

# definição da função media

def media(L):
  return somar(L)/len(L) # com valor de somar e o número de elementos da lista
                         # efetuar a divisão e exibir a média

media([5,5,5])

L = [4,9,5,13,55]


media(L)

"""## exemplo de função épar"""

def epar(y): # assinatura da função
  return y % 2 == 0  #nretorno da função

epar(1)

"""##exemplo de função dentro de função - par ou ímpar"""

def par_ou_impar(n):

  if(epar(n)):
    print('È par')
  else:
    print('É impar')

numero = int(input('Digite um valor: '))

par_ou_impar(numero)

def par_ou_impar(n):

  if epar(n):
    return 'par'
  else:
    return 'ímpar'

par_ou_impar(15)

"""## escopo e tempo de vida - exemplos"""

def teste():
  xis = 300
  print(f'Na função teste numero vale {numero} \n')
  print(f'Na função teste numero vale {xis} \n')

# programa principal

numero = 97

print(f'No programa principal numero vale {numero} \n')
teste()

"""##Ajuda interativa - Help"""

# Ajuda com Help

# 30/09/2023
# SENAI Suiço Brasileiro
# aula 09

# help() # mostra uma ajuda sobre varios topicos...

help(input) # dessa forma mostra somente o que esta escrito dentro do "help()"

"""isto está formatado como códifo
def nome da funcao(nomedoparametro):
  '''
  -> Essa função faz tal coisa
  :param: nomedoparametro: usando para etc...
  :param:
  :param:
"""

# # isto está formatado como códifo
# def nome da funcao(nomedoparametro):
#   """
#   -> Essa função faz tal coisa
#   :param: nomedoparametro: usando para etc...
#   :param:
#   :param:

"""# Uma função com DOCSTRING"""

def sabado(nome, data): # criação da função e abaixo cria uma docstring na qual vc pode descrever o que quiser sobre a sua função...
  """
  -> Esta função foi criada no SENAI
  Obejetivo é mostrar como criar uma
  docstring
  :parametro:nome = nome a ser usado
  :param:data = data, ...etc, etc, etc.
  Deselvolvida por Brenin_do_pix@hotmail.com
  Curso FIC-Phyton SENAI

  """
  print(f'{nome}, {data} é um sábado! ')


sabado('Carlos','30/09/2023') # colocou os dados para ser chamado com a função...

sabado('Aleluia','12/10/2023')

help(sabado) # mostra a assinatura e os parametros da função que foi criada anterior mente...

"""vamos importa o módulo de função matematica - math"""

import math
# Esse jeito de importar traz todas as funções disponíveis em math

dir(math) # para ver todas as funções existentes no módulo math

"""importando apenas algumas funções de ummódulo
Vamos importar as funções ceil, floor e trunc

# Exemplo de importação seletiva em um módulo
"""

# Importação seletiva em um módulo
from math import ceil, floor, trunc # Exemplo de import seletivo

x = float(input("Digite o numero de (X): "))
y = float(input("Digite o numero de (Y): "))

# x = 1.4
# y = 2.6

print(f'\nFloor = ({floor(x)}), ({floor(y)})')      # O maior inteiro menor ou ingual a x ou y
print(f'Floor = ({floor(-x)}), ({floor(-y)})')
print()

print(f'Ceil = ({ceil(x)}),({ceil(y)})')
print(f'Ceil = ({ceil(-x)}),({ceil(-y)})')       # menor inteiro ou igual a y ou x
print()

print(f'Trunc = ({trunc(x)}),({trunc(y)})')       # valor de x ou y truncado para um inteiro
print(f'Trunc = ({trunc(-x)}),({trunc(-y)})')
print()

"""# Outro exemplo de importação seletiva er

"""

from random import random

for i in range(5): # função random gera números aleatórios, "range" limita para 5 vezes...
  print(random())

"""# Mais um exemplo de impoertação eletiva em um módulo"""

from platform import platform

print(platform()) # função que mostra onde esta sendo rodado o codigo

dir(platform) # tem que rodar a celula acima para o funcionamento desta...

from platform import machine

print(machine()) # mostra o modelo da maquina 64 ou 32 bits

import platform
dir(platform)

"""from google.colab import"""

# Programa principal
try:
  n = int(input('Digite um número inteiro: '))
except Exception as erro:
  print(f'O erro encontrado foi {erro.__class__} \n')
else:
  print(f"o número fornecido foi {n}.\n")

print("\033[31mPYTHON\033[31m\n")
print("\044[31mPYTHON\033[44m\n")
print("\033[31mPYTHON\033[31m\n")